// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package account

import (
	"context"
	"sync"
)

// Ensure, that AccountRepoMock does implement AccountRepo.
// If this is not the case, regenerate this file with moq.
var _ AccountRepo = &AccountRepoMock{}

// AccountRepoMock is a mock implementation of AccountRepo.
//
// 	func TestSomethingThatUsesAccountRepo(t *testing.T) {
//
// 		// make and configure a mocked AccountRepo
// 		mockedAccountRepo := &AccountRepoMock{
// 			CreateAccountFunc: func(contextMoqParam context.Context, account *Account) error {
// 				panic("mock out the CreateAccount method")
// 			},
// 			GetAccountFunc: func(contextMoqParam context.Context, accountID AccountID) (*Account, error) {
// 				panic("mock out the GetAccount method")
// 			},
// 			GetAccountByCPFFunc: func(ctx context.Context, cpf string) (*Account, error) {
// 				panic("mock out the GetAccountByCPF method")
// 			},
// 			GetAccountsFunc: func(contextMoqParam context.Context) ([]Account, error) {
// 				panic("mock out the GetAccounts method")
// 			},
// 		}
//
// 		// use mockedAccountRepo in code that requires AccountRepo
// 		// and then make assertions.
//
// 	}
type AccountRepoMock struct {
	// CreateAccountFunc mocks the CreateAccount method.
	CreateAccountFunc func(contextMoqParam context.Context, account *Account) error

	// GetAccountFunc mocks the GetAccount method.
	GetAccountFunc func(contextMoqParam context.Context, accountID AccountID) (*Account, error)

	// GetAccountByCPFFunc mocks the GetAccountByCPF method.
	GetAccountByCPFFunc func(ctx context.Context, cpf string) (*Account, error)

	// GetAccountsFunc mocks the GetAccounts method.
	GetAccountsFunc func(contextMoqParam context.Context) ([]Account, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAccount holds details about calls to the CreateAccount method.
		CreateAccount []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Account is the account argument value.
			Account *Account
		}
		// GetAccount holds details about calls to the GetAccount method.
		GetAccount []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AccountID is the accountID argument value.
			AccountID AccountID
		}
		// GetAccountByCPF holds details about calls to the GetAccountByCPF method.
		GetAccountByCPF []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cpf is the cpf argument value.
			Cpf string
		}
		// GetAccounts holds details about calls to the GetAccounts method.
		GetAccounts []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
	}
	lockCreateAccount   sync.RWMutex
	lockGetAccount      sync.RWMutex
	lockGetAccountByCPF sync.RWMutex
	lockGetAccounts     sync.RWMutex
}

// CreateAccount calls CreateAccountFunc.
func (mock *AccountRepoMock) CreateAccount(contextMoqParam context.Context, account *Account) error {
	if mock.CreateAccountFunc == nil {
		panic("AccountRepoMock.CreateAccountFunc: method is nil but AccountRepo.CreateAccount was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Account         *Account
	}{
		ContextMoqParam: contextMoqParam,
		Account:         account,
	}
	mock.lockCreateAccount.Lock()
	mock.calls.CreateAccount = append(mock.calls.CreateAccount, callInfo)
	mock.lockCreateAccount.Unlock()
	return mock.CreateAccountFunc(contextMoqParam, account)
}

// CreateAccountCalls gets all the calls that were made to CreateAccount.
// Check the length with:
//     len(mockedAccountRepo.CreateAccountCalls())
func (mock *AccountRepoMock) CreateAccountCalls() []struct {
	ContextMoqParam context.Context
	Account         *Account
} {
	var calls []struct {
		ContextMoqParam context.Context
		Account         *Account
	}
	mock.lockCreateAccount.RLock()
	calls = mock.calls.CreateAccount
	mock.lockCreateAccount.RUnlock()
	return calls
}

// GetAccount calls GetAccountFunc.
func (mock *AccountRepoMock) GetAccount(contextMoqParam context.Context, accountID AccountID) (*Account, error) {
	if mock.GetAccountFunc == nil {
		panic("AccountRepoMock.GetAccountFunc: method is nil but AccountRepo.GetAccount was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		AccountID       AccountID
	}{
		ContextMoqParam: contextMoqParam,
		AccountID:       accountID,
	}
	mock.lockGetAccount.Lock()
	mock.calls.GetAccount = append(mock.calls.GetAccount, callInfo)
	mock.lockGetAccount.Unlock()
	return mock.GetAccountFunc(contextMoqParam, accountID)
}

// GetAccountCalls gets all the calls that were made to GetAccount.
// Check the length with:
//     len(mockedAccountRepo.GetAccountCalls())
func (mock *AccountRepoMock) GetAccountCalls() []struct {
	ContextMoqParam context.Context
	AccountID       AccountID
} {
	var calls []struct {
		ContextMoqParam context.Context
		AccountID       AccountID
	}
	mock.lockGetAccount.RLock()
	calls = mock.calls.GetAccount
	mock.lockGetAccount.RUnlock()
	return calls
}

// GetAccountByCPF calls GetAccountByCPFFunc.
func (mock *AccountRepoMock) GetAccountByCPF(ctx context.Context, cpf string) (*Account, error) {
	if mock.GetAccountByCPFFunc == nil {
		panic("AccountRepoMock.GetAccountByCPFFunc: method is nil but AccountRepo.GetAccountByCPF was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cpf string
	}{
		Ctx: ctx,
		Cpf: cpf,
	}
	mock.lockGetAccountByCPF.Lock()
	mock.calls.GetAccountByCPF = append(mock.calls.GetAccountByCPF, callInfo)
	mock.lockGetAccountByCPF.Unlock()
	return mock.GetAccountByCPFFunc(ctx, cpf)
}

// GetAccountByCPFCalls gets all the calls that were made to GetAccountByCPF.
// Check the length with:
//     len(mockedAccountRepo.GetAccountByCPFCalls())
func (mock *AccountRepoMock) GetAccountByCPFCalls() []struct {
	Ctx context.Context
	Cpf string
} {
	var calls []struct {
		Ctx context.Context
		Cpf string
	}
	mock.lockGetAccountByCPF.RLock()
	calls = mock.calls.GetAccountByCPF
	mock.lockGetAccountByCPF.RUnlock()
	return calls
}

// GetAccounts calls GetAccountsFunc.
func (mock *AccountRepoMock) GetAccounts(contextMoqParam context.Context) ([]Account, error) {
	if mock.GetAccountsFunc == nil {
		panic("AccountRepoMock.GetAccountsFunc: method is nil but AccountRepo.GetAccounts was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockGetAccounts.Lock()
	mock.calls.GetAccounts = append(mock.calls.GetAccounts, callInfo)
	mock.lockGetAccounts.Unlock()
	return mock.GetAccountsFunc(contextMoqParam)
}

// GetAccountsCalls gets all the calls that were made to GetAccounts.
// Check the length with:
//     len(mockedAccountRepo.GetAccountsCalls())
func (mock *AccountRepoMock) GetAccountsCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockGetAccounts.RLock()
	calls = mock.calls.GetAccounts
	mock.lockGetAccounts.RUnlock()
	return calls
}
